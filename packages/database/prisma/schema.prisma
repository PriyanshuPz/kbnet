generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model KMap {
  id        String   @id @default(cuid())
  query     String
  createdAt DateTime @default(now())

  focusedNodeId String? // Last focused node ID (can be null if not visited yet)

  nodes    KMapNode[]
  timeline UserTimeline[]

  @@map("k_maps")
}

model KMapNode {
  id      String @id @default(cuid())
  kmapId  String
  kmap    KMap   @relation(fields: [kmapId], references: [id])
  label   String
  content String
  source  String

  deepNodeId       String?
  connectedNodeAId String?
  connectedNodeBId String?

  deepNode   KMapNode?  @relation("DeepNodeRelation", fields: [deepNodeId], references: [id])
  deepNodeOf KMapNode[] @relation("DeepNodeRelation")

  connectedNodeA   KMapNode?  @relation("ConnectedNodeARelation", fields: [connectedNodeAId], references: [id])
  connectedNodeAOf KMapNode[] @relation("ConnectedNodeARelation")

  connectedNodeB   KMapNode?  @relation("ConnectedNodeBRelation", fields: [connectedNodeBId], references: [id])
  connectedNodeBOf KMapNode[] @relation("ConnectedNodeBRelation")

  depth Int @default(0)

  timelines UserTimeline[]

  createdAt DateTime @default(now())

  @@map("k_map_nodes")
}

model UserTimeline {
  id     String @id @default(cuid())
  kmapId String
  kmap   KMap   @relation(fields: [kmapId], references: [id])

  userId String
  nodeId String
  node   KMapNode @relation(fields: [nodeId], references: [id])

  action    SwipeAction // "swipeLeft" | "swipeRight" | "swipeUp" | "swipeDown"
  depth     Int // How deep the user was at this step
  createdAt DateTime    @default(now())

  @@map("k_map_timelines")
}

enum SwipeAction {
  swipeLeft
  swipeRight
  swipeUp
  swipeDown
  Tap
}
