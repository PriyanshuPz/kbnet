generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  maps          Map[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Represents a single learning topic or concept in your knowledge base.
// These are the "nodes" of your core graph. They are independent of any session.
model Node {
  id        String   @id @default(cuid())
  title     String
  summary   String? // Brief explanation
  content   String? // Detailed explanation
  generated Boolean  @default(false) // Was this node generated by AI/system?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships where this Node is the source
  sourceRelationships NodeRelationship[] @relation("Source_Node")
  // Relationships where this Node is the target
  targetRelationships NodeRelationship[] @relation("Target_Node")

  // Navigation steps that point to this node
  // A Node can be visited in MANY NavigationSteps
  navigationSteps NavigationStep[]

  @@map("nodes")
}

// Defines the directed connections between learning topics (Nodes).
// These are the "edges" of your core graph: similar, related, deep.
model NodeRelationship {
  id   String           @id @default(cuid())
  type RelationshipType // e.g., DEEP, SIMILAR, RELATED

  sourceNodeId String
  targetNodeId String
  sourceNode   Node   @relation("Source_Node", fields: [sourceNodeId], references: [id], onDelete: Cascade)
  targetNode   Node   @relation("Target_Node", fields: [targetNodeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  // Ensures that a specific type of relationship between two nodes is unique.
  // E.g., Node A can only have ONE 'DEEP' relationship to Node B.
  @@unique([sourceNodeId, targetNodeId, type])
  @@map("node_relationships")
}

// Represents a single user's learning session.
// It tracks the overall session and the user's current position within their path.
model Map {
  id           String   @id @default(cuid())
  userId       String // Assuming you have a User model, link to it here
  initialQuery String // The topic the user started with
  startedAt    DateTime @default(now())
  lastActiveAt DateTime @updatedAt
  isActive     Boolean  @default(true)

  // Points to the *last* NavigationStep taken in this session.
  // This is how you track the user's current position in their path history.
  currentNavigationStepId String?         @unique
  currentNavigationStep   NavigationStep? @relation("CurrentMapStep", fields: [currentNavigationStepId], references: [id], onDelete: SetNull)

  // All navigation steps taken within this session
  navigationPath NavigationStep[] @relation("MapNavigation")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("maps")
}

// Represents a single step in a user's navigation path within a session.
// This forms the branching history.
model NavigationStep {
  id        String         @id @default(cuid())
  mapId     String
  nodeId    String // The Node (topic) visited at this step
  direction SwipeDirection // The action that led to this node (UP, LEFT, RIGHT, DOWN)
  timestamp DateTime       @default(now())

  // Tracks the order of steps within a specific branch.
  // Useful for displaying linear progress within a branch.
  stepIndex Int

  // Crucial for branching: Identifies which branch this step belongs to.
  // A new UUID is generated when a user diverges from an existing path.
  pathBranchId String @default(cuid())

  // Links to the *previous* NavigationStep in this specific path sequence.
  // This creates the tree/DAG structure for backtracking and branching.
  parentStepId  String?
  parentStep    NavigationStep?  @relation("PathHierarchy", fields: [parentStepId], references: [id])
  // A parent step can have MANY children steps (branches).
  childrenSteps NavigationStep[] @relation("PathHierarchy")

  map  Map  @relation("MapNavigation", fields: [mapId], references: [id], onDelete: Cascade)
  node Node @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  // Relation for the current step of a session
  currentSession Map? @relation("CurrentMapStep")

  // Ensures uniqueness of step index within a specific branch of a session.
  // This is the correct unique constraint for your branching path.
  @@index([mapId, timestamp])
  @@map("navigation_steps")
}

// Defines the types of relationships between nodes.
enum RelationshipType {
  DEEP // Corresponds to "swipe up" for deep explanation
  RELATED // Corresponds to "swipe right" for related topic
  SIMILAR // Corresponds to "swipe left" for similar topic
}

// Defines the direction of swipe actions.
enum SwipeDirection {
  UP // Swiped up to a deep explanation
  DOWN // Swiped down (e.g., "Go Back" action, or back up from deep)
  LEFT // Swiped left to a similar topic
  RIGHT // Swiped right to a related topic
  INITIAL // For the very first step in a session
}
