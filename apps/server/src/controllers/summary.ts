import { prisma } from "@kbnet/db";
import { MindsDBConfig, SUMMARY_AGENT_PROMPT } from "@kbnet/shared";
import { connectMindsDB, runMindsDBQuery } from "../lib/mindsdb";

export async function generateMapSummary(mapId: string) {
  try {
    await connectMindsDB();

    const map = await prisma.map.findUnique({
      where: { id: mapId },
      include: { latestSummary: true },
    });

    if (!map || !map.latestSummary) {
      throw new Error("Map or summary not found");
    }

    const query = await runMindsDBQuery(`
      SELECT answer
      FROM ${MindsDBConfig.SUMMARY_AGENT_NAME}
      WHERE question = '${SUMMARY_AGENT_PROMPT(map.id, map.initialQuery).replaceAll(`'`, `''`)}'
      LIMIT 1;
    `);

    if (query.rows.length === 0) {
      throw new Error("No summary generated by MindsDB");
    }

    const summaryRecord = query.rows[0];
    const summaryText = summaryRecord?.answer;

    if (!summaryText) {
      throw new Error("Summary text is empty");
    }

    await prisma.mapSummary.update({
      where: { id: map.latestSummary.id },
      data: {
        summary: summaryText,
        status: "COMPLETED",
        generatedBy: "SYSTEM",
        completedAt: new Date(),
      },
    });
  } catch (error) {
    console.error("Error generating summary with MindsDB:", error);
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";

    await prisma.mapSummary.update({
      where: { mapId },
      data: {
        status: "FAILED",
        summary: errorMessage,
        completedAt: new Date(),
      },
    });
  }
}
